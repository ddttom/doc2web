// File: lib/html/processors/numbering-processor.js
// Numbering and list processing utilities

/**
 * Process nested numbered paragraphs
 */
function processNestedNumberedParagraphs(
  doc,
  styleInfo,
  numberingContext = null
) {
  try {
    if (!numberingContext) {
      console.warn("No numbering context for lists.");
      return;
    }

    // Ensure all elements that will be numbered have their abstractNumId
    numberingContext.forEach((ctx) => {
      if (ctx.numberingId && styleInfo.numberingDefs?.nums[ctx.numberingId]) {
        ctx.abstractNumId =
          styleInfo.numberingDefs.nums[ctx.numberingId].abstractNumId;
      }
    });

    const elementsToNumber = Array.from(
      doc.querySelectorAll("p, li, h1, h2, h3, h4, h5, h6")
    );
    elementsToNumber.forEach((el) => {
      const elText = el.textContent.trim();
      // Find a matching context more reliably
      const context = numberingContext.find((ctx) => {
        if (!ctx.textContent || !ctx.abstractNumId) return false;
        const ctxText = ctx.textContent.trim();
        // Prioritize if element already has num-id and level from mammoth
        const elNumId = el.getAttribute("data-num-id");
        const elNumLevel = el.getAttribute("data-num-level");
        if (
          elNumId === ctx.numberingId &&
          elNumLevel === ctx.numberingLevel?.toString()
        ) {
          return (
            ctxText === elText ||
            elText.includes(ctxText) ||
            ctxText.includes(elText)
          );
        }
        // Fallback to text match if attributes aren't set/matched
        return (
          !elNumId &&
          !elNumLevel &&
          (ctxText === elText ||
            elText.includes(ctxText) ||
            ctxText.includes(elText))
        );
      });

      if (context && context.resolvedNumbering && context.abstractNumId) {
        console.log('Applying numbering attributes:', {
          tagName: el.tagName,
          textContent: el.textContent?.substring(0, 50) + '...',
          abstractNumId: context.abstractNumId,
          numberingLevel: context.numberingLevel,
          numberingId: context.numberingId
        });
        
        // Set basic numbering attributes
        el.setAttribute("data-num-id", context.numberingId || ""); // Keep concrete numId if available
        el.setAttribute("data-abstract-num", context.abstractNumId);
        el.setAttribute(
          "data-num-level",
          context.numberingLevel?.toString() || ""
        );</search>
</search_and_replace>
        
        // Add format attribute for CSS targeting
        const format = context.resolvedNumbering.format || "";
        el.setAttribute("data-format", format);
        
        // Add box model fixes to prevent character overlap
        el.style.overflowWrap = "break-word";
        el.style.wordWrap = "break-word";
        
        // Special handling for Roman numerals
        if (format === "upperRoman" || format === "lowerRoman") {
          // Add extra padding for Roman numerals
          const currentPadding = el.style.paddingLeft || "0";
          const paddingValue = parseInt(currentPadding) + 8;
          el.style.paddingLeft = `${paddingValue}px`;
        }
        
        // Apply section ID from resolved numbering
        if (context.resolvedNumbering.sectionId) {
          // For headings, we only set the ID if it doesn't already have one
          // For TOC entries, don't overwrite their unique toc-* IDs
          if (!/^h[1-6]$/i.test(el.tagName) || !el.id) {
            // Skip TOC entries to preserve their unique toc-* IDs
            if (!el.classList.contains('docx-toc-entry') && !el.closest('nav.docx-toc')) {
              el.id = context.resolvedNumbering.sectionId;
              el.setAttribute("data-section-id", context.resolvedNumbering.sectionId);
              
              // Add special class for Roman numeral sections to help with CSS targeting
              if (format === "upperRoman" || format === "lowerRoman") {
                el.classList.add("roman-numeral-section");
              }
            }
          }
        }
      }
    });
    // List creation logic (converting <p> to <ol><li>) should be reviewed separately
    // For now, this ensures data attributes are set on existing p, h, li.
    // The actual conversion of <p> with numbering data to <ol><li> structure needs to be robust.
    // The current processNumberingGroup might need to be adapted to work with elements that already have data attributes.
  } catch (error) {
    console.error(
      "Error processing nested numbered paragraphs:",
      error.message,
      error.stack
    );
  }
}

/**
 * Process special paragraphs (placeholder for future implementation)
 */
function processSpecialParagraphs(doc, styleInfo) {
  // Placeholder for special paragraph processing
  // This can be expanded based on specific requirements
}

/**
 * Check if text matches a structural pattern
 */
function isStructuralMatch(text, pattern) {
  return false; // Placeholder implementation
}

/**
 * Extract structural pattern from text
 */
function extractStructuralPattern(text) {
  return "unknown"; // Placeholder implementation
}

/**
 * Identify list patterns in paragraphs
 */
function identifyListPatterns(paragraphs) {
  return {
    numberedItems: [],
    alphaItems: [],
    romanItems: [],
    specialParagraphs: [],
  }; // Placeholder implementation
}

/**
 * Check if paragraph is special based on patterns
 */
function isSpecialParagraph(text, specialPatterns) {
  return null; // Placeholder implementation
}

module.exports = {
  processNestedNumberedParagraphs,
  processSpecialParagraphs,
  identifyListPatterns,
  isSpecialParagraph,
  isStructuralMatch,
  extractStructuralPattern,
};
